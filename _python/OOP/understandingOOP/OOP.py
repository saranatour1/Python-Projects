import random
import math
choice=0
class mapChoice:
	def __init__(self):
		self.mapChoice=math.floor(random.random() * 4) + 1
	def mapGeneration(self,mapChoice):
		mapDict = {
        0: "blank",
        1: "wall",
        2: "sushi",
        3: "ongiri",
      }
		mapGenerate = {
          0: [
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0],
            [0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
            [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 3, 0, 0, 3, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2],
            [0, 1, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 0, 1, 0, 0, 2, 2, 1],
            [0, 1, 0, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1],
            [0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2],
            [2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 2, 0, 2, 2, 1, 1],
            [2, 2, 0, 2, 0, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2],
          ],
          1: [
            [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2],
            [0, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 2, 3, 3, 0],
            [0, 2, 1, 2, 2, 2, 1, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 0],
            [2, 3, 3, 3, 2, 3, 2, 2, 2, 0, 3, 2, 2, 1, 3, 2, 3, 1, 2],
            [2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 2, 2, 2, 0, 0, 0],
            [2, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 2, 0, 0, 3, 3, 2, 3, 2],
            [1, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 0, 3, 3, 2, 3, 2],
            [3, 3, 2, 3, 0, 2, 0, 0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 0, 2],
            [0, 0, 1, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2],
            [3, 3, 0, 3, 3, 1, 3, 3, 3, 0, 2, 2, 1, 3, 3, 3, 2, 2, 3],
            [3, 3, 0, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 0, 0, 0, 0, 2, 0],
            [0, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2],
            [3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 0, 3, 3, 3, 1, 3, 2, 3, 3],
            [3, 2, 0, 2, 1, 2, 2, 2, 3, 0, 0, 0, 3, 0, 0, 0, 2, 3, 3],
          ],
          2: [
            [3, 2, 2, 2, 2, 2, 2, 2, 1, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2],
            [0, 0, 0, 3, 2, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 0],
            [0, 2, 1, 2, 2, 2, 1, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 3, 0],
            [2, 3, 3, 3, 2, 3, 2, 2, 2, 0, 3, 2, 2, 1, 3, 2, 3, 1, 2],
            [2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 2, 2, 2, 0, 0, 0],
            [2, 3, 3, 3, 2, 2, 0, 0, 0, 0, 3, 2, 0, 0, 3, 3, 2, 3, 2],
            [1, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 2, 3, 0, 3, 3, 2, 3, 2],
            [3, 3, 2, 3, 0, 2, 3, 3, 2, 0, 0, 2, 0, 1, 2, 2, 2, 3, 2],
            [3, 0, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2],
            [3, 3, 0, 3, 3, 1, 3, 3, 3, 0, 2, 2, 1, 3, 3, 3, 2, 2, 3],
            [3, 3, 0, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3],
            [3, 0, 2, 2, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2],
            [3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 0, 3, 3, 3, 1, 3, 2, 3, 3],
            [3, 2, 0, 2, 1, 2, 2, 2, 3, 0, 0, 0, 3, 0, 0, 0, 2, 3, 3],
          ],
          3: [
            [3, 2, 2, 2, 2, 2, 2, 2, 1, 3, 2, 2, 2, 0, 0, 1, 2, 2, 2],
            [0, 0, 0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 2, 3, 3, 0],
            [0, 2, 1, 2, 2, 2, 1, 3, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 0],
            [2, 3, 3, 3, 2, 1, 2, 2, 2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 2],
            [2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 3, 3, 3, 2, 2, 2, 0, 0, 0],
            [2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 0, 3, 0],
            [1, 0, 0, 0, 1, 1, 3, 3, 1, 3, 3, 1, 3, 0, 3, 3, 2, 3, 2],
            [2, 3, 2, 3, 0, 2, 3, 3, 2, 0, 0, 2, 0, 1, 2, 2, 2, 3, 2],
            [2, 0, 1, 3, 3, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 2, 0, 2],
            [2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 2, 2, 3],
            [2, 3, 0, 3, 3, 2, 3, 3, 3, 2, 0, 0, 0, 0, 0, 3, 3, 2, 3],
            [2, 0, 2, 1, 1, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 2, 2, 2],
            [3, 2, 3, 2, 1, 2, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1],
            [1, 2, 0, 2, 1, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 1],
          ],
          4: [
            [1, 2, 2, 1, 2, 1, 2, 3, 3, 3, 1, 3, 2, 0, 0, 1, 0, 3, 3],
            [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 0, 1, 1],
            [3, 1, 0, 0, 2, 3, 3, 3, 2, 0, 2, 3, 0, 2, 2, 0, 2, 2, 2],
            [2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 2, 1, 1, 3, 3, 3, 2, 1, 2],
            [1, 1, 2, 2, 2, 2, 2, 0, 2, 3, 2, 1, 2, 0, 2, 3, 2, 0, 0],
            [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3],
            [3, 2, 2, 0, 0, 3, 2, 0, 2, 3, 3, 3, 2, 0, 0, 0, 2, 0, 2],
            [1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 3, 2, 1, 2, 0, 2, 2, 1, 1],
            [2, 2, 3, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 2],
            [2, 2, 1, 2, 3, 2, 3, 1, 2, 0, 2, 2, 2, 1, 1, 2, 2, 3, 2],
            [1, 1, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, 1, 2, 2, 2],
            [0, 2, 2, 3, 1, 3, 2, 1, 2, 0, 1, 2, 2, 1, 2, 1, 2, 1, 2],
            [1, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 3, 2, 3, 2, 1, 2, 1, 2],
            [0, 2, 2, 2, 2, 1, 1, 2, 2, 0, 2, 1, 2, 2, 2, 1, 2, 2, 2],
          ],
        }
		return self
  
if choice == 0:
  choice=mapChoice[0]
elif choice == 1:
  choice=mapChoice[1]
elif choice == 2:
  choice=mapChoice[2]
elif choice == 3:
  choice=mapChoice[3]
elif choice == 4:
  choice=mapChoice[4]

map = mapChoice().mapGeneration(mapChoice=choice)
